Отчет

Использованные средства разработки:

 • Язык программирования: Python
 • Фреймворк: Pygame

Ход работы:

 1. Создание интерфейса приложения для работы с растеризацией
Создано приложение с окном, в котором пользователи могут выбирать алгоритм, изменять масштаб, а также видеть сетку координат и оси с метками. Учитываются такие параметры, как положение координатных осей в центре экрана и динамическое масштабирование сетки при изменении масштаба.
 2. Реализация функций для отрисовки координатной сетки и осей
Написана функция draw_grid, которая отрисовывает сетку, оси и метки на координатных осях. Поддерживается привязка координат к дискретной сетке.
Интерфейс приложения позволяет пользователю выбрать один из алгоритмов, задавать координаты концов отрезков, задавать окружность, а также увеличивать и уменьшать масштаб сетки.
 4. Реализация пошагового алгоритма в виде функции step_by_step
Алгоритм был реализован через равномерное добавление точек вдоль линии от начальной до конечной, что дает простое пошаговое отображение.
 5. Реализация алгоритма ЦДА в виде функции dda
Алгоритм ЦДА, который создает отрезок с равномерным изменением координат по оси x и y, реализован для эффективного отображения линий.
 6. Реализация алгоритма Брезенхема для отрезков в виде функции bresenham_line
Алгоритм Брезенхема для линий использует целочисленную арифметику, чтобы обходиться без плавающей запятой. Он минимизирует отклонения от идеального пути.
 7. Реализация алгоритма Брезенхема для окружности в виде функции bresenham_circle
Этот алгоритм позволяет отрисовывать окружности с использованием симметрии и минимизации вычислений, что делает его эффективным для окружностей с любым радиусом.
 8. Добавление вывода времени выполнения каждого алгоритма
Для каждого алгоритма измеряется время его выполнения и выводится на экран, что позволяет оценить эффективность каждого метода.

Временные характеристики:

Для анализа эффективности были взяты следующие параметры отрезков и окружности:

 • Отрезок: (0, 0), (18, 3)
 • Окружность: (0,0) r = 15

Время выполнения каждого алгоритма (в наносекундах):

Алгоритм                        Время
Пошаговый алгоритм              133 мс
Алгоритм ЦДА                    140 мс
Алгоритм Брезенхема             143 мс
Алгоритм Брезенхема (окружность)312 мс

Анализ:

Замеры показывают, что вывод координатной сетки и пикселей на экран занимает существенное время, что объясняет сопоставимость времени работы различных алгоритмов. В алгоритмах для отрисовки линий, таких как Брезенхем и ЦДА, время работы близко, так как основная нагрузка приходится на рендеринг, а не на вычисления.

Вывод:

В ходе выполнения данной работы я:

 • Создал приложение, иллюстрирующее базовые алгоритмы растеризации отрезков и кривых.
 • Углубил понимание различных алгоритмов растеризации, изучив их достоинства и недостатки.
 • Получил опыт работы с библиотекой Pygame и Python.
 • Разработал приложение с удобным интерфейсом, позволяющим пользователю гибко управлять масштабом и выбором алгоритма.